谷歌容器团队发布了container-diff工具，用来帮助恢复容器影响之间的不同，帮助我们进行容器应用开发。我们认为这个工具对开发基于容器的工具很有用，因为很高兴将它开源给开发社区。

容器和dockefile格式使客制化应用运行环境更加方便和理解。这是容器对软件开发带来的有点，而一个主要的缺点在于很难将dockerfile对映像改变可视化，使得映像臃肿，排查困难。

设想一个开发者正在基于第三方维护的映像开发应用，某人发布了此映像的一个新版本基础包。开发者采用了新映像并重建了应用，突然应用无响应了，因为依赖于以前基础影像中的系统包，但是因为没有可用工具判断这两个基础映像的更改，无法确定到底依赖哪个系统包以及哪个版本，这会严重影响开发进度。

介绍container-diff

container-diff帮助用户了解映像之间的差别。意味着container-diff从了解底层数据改变开始，然后通知包管理者并已一种可读的方式将信息传递给用户；它可以发现映像内系统包、语言包和文件的变化。

container-diff帮助用户察觉映像之间语法的不同，也就意味着container-diff监控底层变化，然后通过可读的方式输出变化。此工可以发现系统包、语言包和文件的变化。

用户可以用几种格式说明映像--包括本地Docker守护进程（ 使用daemon://前缀 ），远程注册表（ 使用remote://前缀 ），或者用'docker save'命令输出的tar文件。也可以将这几种格式整合起来发现本地映像版本和远程版本之间的不同，这对于还没准备发布的映像尤为重要。container-diff内置支持映像tar包和注册协议，使得它可以在无Docker守护进程环境下运行。

实例和使用场景

此例子是一个在Debian基础包内部安装Python的Dockerfile。在它们之间运行container-diff，用户可以看到所有Python依赖的apt包。


下图是接续上面那个Python基础运行映像，然后在其中安装mock和其它六个包。用户可以同时使用container-diff和pip differ，看到所有安装或者被改变的Python包：



以上功能对于管理Python包的依赖模块以及改变非常有用。

这些只是一部分例子。此工具现在支持通过pip和npm安装的Python和Node.js包，同时支持映像文件系统和Docker历史的比较。未来，我们还会添加其他运行环境和不同语言的支持，包括Java，Go和Ruby。外部贡献也是非常欢迎的，如果想对container-diff作出贡献，可以看how-to指南。

现在我们已经看到如何比较两个映像，很容易设想此工具如何被整合到大型开发工作流：
1.生成更改日志：
考虑到container-diff可以用户发现文件系统和包的更改，因此可以被用到自动生成新映像的更改日志。
2.持续整合：
作为CI系统一部分，用户可以使用container-diff发现使用Dockerfile带来的文件系统级别的改变。
container-diff默认输出模式是“用户可读的”，但是也支持JSON格式，允许用户自动分析和处理。

单一映像分析
除了可以用于比较映像间不同，container-diff还可以用于分析映像内部。用户可以迅速获得一个映像内部信息，例如系统和语言包以及文件系统内容。

咱们再看看Debian基础映像，可以很容易使用此工具发现安装过的包，以及他们的版本和大小：


我们可以用这个功能发现应用的兼容性，或者排序系统包的大小查看那个占用了更大的空间。

更多信息和实例，可以查看github上的文档。
特别感谢我们的实习软件工程师Colette Torres和Abby Tisdale, 他们帮忙编译了这个工具。
