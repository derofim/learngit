我们最近在k8s之上开发了一个分布式cron作业调度系统，是一个非常棒的容器编排平台。k8s目前非常流行，而且有很多新功能，其中一个就是工程师们不需要知道应用泡在哪台虚机上。
分布式系统其实很复杂，而管理分布式系统则是运维团队面对的最复杂的问题。在生产环境中引入新软件并学会如何可靠使用时很严肃的问题。例如：为什么学会操作k8s很重要就是一个例子，这里有一个由k8s bug引起一个小时系统瘫痪问题的时候总结。
本博文中，我们会解释为什么要使用k8s，检查如何将k8s整合到现有架构，如何提高k8s集群可靠性，以及我们在k8s之上做的抽象。

什么是k8s？
k8s是在集群内调度应用的分布式系统。可以通知k8s运行某个应用的五个实例，k8s则会动态在工作节点上调度起它们。通过自动化调度容器可以增加利用率和节省费用，强大部署能力使得开发者可以细粒度更新代码，安全上下文和网络策略则使得多租户工作流安全运行。
k8s内置许多不同类型的调度策略，可以调度长生命周期的HTTP服务，集群内运行的守护进程集合，每小时运行的cron工作，等等。有需要k8s，如果想了解更多，Kelsy Hightower有很多有趣的专题讨论，例如：k8s for sysadmins和healthz:Stop reverse engineering applications and start monitoring from the inside。在slack社区也有一个非常棒的社区。

为什么使用k8s？
每个项目都会从一个业务需求开始。我们的目的是提高已有的基于cron作业系统可靠性和安全性。需求如下：
1. 需要由小团队运维（本项目只有两个全职员工）
2.需要在20台设备内调度大约500个不同作业

我们选择k8s作为基础的原因是：
1.希望采用开源系统
2.k8s有一套内置分布式cron作业调度器，我们不需要重新写一个
3.k8s很活跃，并且乐于接受贡献
4.k8s用Go开发（比较易于学习）。几乎所有bug修复都是有我们团队不专业的Go开发者提交的

如果我们可以顺利操作k8s，我们未来就可以在其上开发（例如，我们现在在k8s之上训练机器学习模型）。以前我们使用Chronos作为cron作业调度系统，但是目前不能满足我们的需求，而且不可维护（活跃度很低）因此我们决定不再采用它。
关于是否采用k8s，最好做到：不要人云亦云；做一个可靠性集群需要很多时间，而也无需求却很不明显。因此要仔细考虑。

可靠性是什么？
对于操作服务，可靠性并不如字面那么简单。谈到可靠性，首先需要建立一个SLO（服务级别对象service level objective）。
我们有三种主要目标：
1. 99.99%的cron工作需要在被调度后20分钟之内运行，20分钟是很宽的窗口，但是客户并没有更精确的需求。
2. 作业应该占据99.99%的调度时间片（不被干扰）
3. 迁移到k8s不应引起任何客户端问题

这意味着：
1. k8s API短期故障时可以容忍的（如果出现十分钟的故障，只要五分钟之内恢复就是可以容忍的）
2. 调度bugs（当一个cron作业无法运行）是不可接受的。这是一个很严重的问题。
3. 需要关注pod退出和安全停止方式，以便作业不会频繁被终止。
因为我们需要一个细致的迁移方案。

创建一个k8s集群
穿件第一个k8s集群最基本方法就是从头开始而不是使用例如kubeadm或者kops之类的工具。我们通过puppet提供配置，这是一个常用的配置管理工具。从头建立有两个原因：能够深度整合k8s到既有架构，深入理解其内部机制。



